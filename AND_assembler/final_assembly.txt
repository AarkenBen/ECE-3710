 xor r1 r1
 addui 0x5A r1
 write r1 0x002409 //Initialize servo to 90 degrees
find_angle:
 load r0 0x002408  //Check that data is valid, otherwise loop until
 xor r1 r1
 addui 0x1 r1
 cmp r1 r0
 jmpne find_angle
initialize:
 xor r22 r22
 write r22 0x002408 //Write 0 to say data invalid now
 xor r29 r29
 xor r31 r31                
 xor r28 r28
 load r31 0x002400 
P1:
 addu 0x01 r22
 load r29 0x002401
 jmpb r31 r29 P2
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P2:
 addu 0x01 r22
 load r29 0x002402
 jmpb r31 r29 P3
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P3:
 addu 0x01 r22
 load r29 0x002403
 jmpb r31 r29 P4
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P4:
 addu 0x01 r22
 load r29 0x002404
 jmpb r31 r29 P5
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P5:
 addu 0x01 r22
 load r29 0x002405
 jmpb r31 r29 P6
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P6:
 addu 0x01 r22
 load r29 0x002406
 jmpb r31 r29 P6
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
P7:
 addu 0x01 r22
 load r29 0x002407
 jmpb r31 r29 new_angle
 xor r28 r28
 addu r22 r28
 xor r31 r31
 addu r29 r31
new_angle:
 xor r29 r29
 load r29 0x002409
 xor r30 r30
 cmp r30 r28
 jmpe B0
 addui 0x1 r30
 cmp r30 r28
 jmpe B1
 addui 0x1 r30
 cmp r30 r28
 jmpe B2
 addui 0x1 r30
 cmp r30 r28
 jmpe B3
 addui 0x1 r30
 cmp r30 r28
 jmpe B4
 addui 0x1 r30
 cmp r30 r28
 jmpe B5
 addui 0x1 r30
 cmp r30 r28
 jmpe B6
 addui 0x1 r30
 cmp r30 r28
 jmpe B7
B0:
 addui 0x27 r29  
 jmp WriteTemp
B1:
 addui 0x20 r29
 jmp WriteTemp
B2:
 addui 0x12 r29
 jmp WriteTemp
B3:
 jmp WriteTemp
B4:
 jmp WriteTemp
B5:
 subui 0x12 r29
 jmp WriteTemp
B6:
 subui 0x20 r29
 jmp WriteTemp
B7:
 subui 0x27 r29
 jmp WriteTemp
WriteTemp:
 xor r30 r30
 addui 0x84 r30  
 cmp r30 r29
 jmpbe Final  //If our angle wasn't greater than 180, skip to Final
 xor r29 r29
 addui 0x84 r29 //Default it to 180
Final:
 write r29 0x002409 //Write to servo
 jmp find_angle
